<script type="text/javascript">
        let edges;
        let nodes;
        let network;
        let container = document.getElementById('mynetwork');
        let options, data;

        // This method is responsible for drawing the graph, returns the drawn network
        function drawGraph() {
            // parsing and collecting nodes and edges from the python
            nodes = new vis.DataSet([
            {"group": 0, "id": 7, "label": 7, "shape": "dot", "size": 10, "title": "7"},
            {"group": 0, "id": 8, "label": 8, "shape": "dot", "size": 10, "title": "8"},
            {"group": 1, "id": 2, "label": 2, "shape": "dot", "size": 10, "title": "2"},
            {"group": 2, "id": 1, "label": 1, "shape": "dot", "size": 10, "title": "1"},
            {"group": 3, "id": 6, "label": 6, "shape": "dot", "size": 10, "title": "6"},
            {"group": 3, "id": 9, "label": 9, "shape": "dot", "size": 10, "title": "9"},
            {"group": 4, "id": 3, "label": 3, "shape": "dot", "size": 10, "title": "3"},
            {"group": 4, "id": 4, "label": 4, "shape": "dot", "size": 10, "title": "4"},
            {"group": 4, "id": 5, "label": 5, "shape": "dot", "size": 10, "title": "5"},
            {"group": 5, "id": 0, "label": 0, "shape": "dot", "size": 10, "title": "0"},
        ]);
            edges = new vis.DataSet([

                            {"id": 0, "from": 7, "to": 8, "label": "0.481"},
            {"id": 1, "from": 6, "to": 9, "label": "0.345"},
            {"id": 2, "from": 3, "to": 4, "label": "0.537"},
            {"id": 3, "from": 3, "to": 5, "label": "0.541"},
            {"id": 4, "from": 7, "to": 2, "label": "0.56"},
            {"id": 5, "from": 7, "to": 1, "label": "0.66"},
            {"id": 6, "from": 7, "to": 6, "label": "0.76"},
            {"id": 7, "from": 7, "to": 3, "label": "0.692"},
            {"id": 8, "from": 2, "to": 1, "label": "0.659"},
            {"id": 9, "from": 2, "to": 3, "label": "0.719"},
            {"id": 10, "from": 1, "to": 3, "label": "0.667"},
            {"id": 11, "from": 6, "to": 3, "label": "0.667"},
]);
            data = {nodes: nodes, edges: edges};

                options = {
                    "layout": {"randomSeed": 1}, 
                    "configure": {"enabled": false}, 
                    "edges": {
                        "color": {"inherit": true},
                        "smooth": {"enabled": true, "type": "dynamic"}
                    },
                    "interaction": {"dragNodes": true, 
                        "hideEdgesOnDrag": false, 
                        "hideNodesOnDrag": false, 
                        "navigationButtons": true}, 
                    "physics": {"enabled": true, 
                        "stabilization": {"enabled": true, 
                        "fit": true, 
                        "iterations": 1000, 
                        "onlyDynamicEdges": false, 
                        "updateInterval": 50}
                      }
                };
                
                network = new vis.Network(container, data, options);

                return network;
            }

            drawGraph();
      let value = document.getElementById("close");
      let val = value.innerText.split('\n');
      let size = Number(val[0].split(',')[0]);
      let edgeValue = Number(val[0].split(',')[1]) - size;
      let api_val = [];
      let c2clen = [];
      let clusterIds = [];
      for(let i = 2;i <2 + size;i++){
        clusterIds.push(val[i].split(','));
      }
      for(let i = 2 + size;i <2 + size * 2;i++){
        api_val.push(val[i].split(','));
      }

      for(let i = 2 + size * 2;i <2 + size * 3;i++){
        c2clen.push(val[i].split(','));
      }


    
    network.on("click", function (params) {
        let clickedNodes = nodes.get(params.nodes);
        document.getElementById("clusterId").innerText = (clickedNodes[0].group).toString();
        document.getElementById("nodeId").innerText = (clickedNodes[0].id).toString();

        const parentElement = document.getElementById('cluster-api-list');
        while (parentElement.firstChild) {
          parentElement.removeChild(parentElement.firstChild);
        }

        for(let i = 0;i < api_val[clickedNodes[0].group].length;i++){
          let newParagraph = document.createElement('p');
          newParagraph.classList.add('first-value');
          newParagraph.textContent = api_val[clickedNodes[0].group][i];
          parentElement.appendChild(newParagraph);
        }

        const parentElement2 = document.getElementById('c2c-length-list');
        while (parentElement2.firstChild) {
          parentElement2.removeChild(parentElement2.firstChild);
        }
        for(let i = 0;i < c2clen[clickedNodes[0].group].length;i++){
          let newParagraph = document.createElement('p');
          newParagraph.classList.add('second-value');
          newParagraph.textContent = "클러스터 " + i.toString() + "과의 API 거리 : " + c2clen[clickedNodes[0].group][i].toString();
          parentElement2.appendChild(newParagraph);
        }
        
      });
      
      
    var clusterIndex = 0;
      var clusters = [];
      var lastClusterZoomLevel = 0;
      var clusterFactor = 0.9;
      
    network.once("initRedraw", function () {
        if (lastClusterZoomLevel === 0) {
          lastClusterZoomLevel = network.getScale();
        }
      });

      // we use the zoom event for our clustering
      network.on("zoom", function (params) {
        if (params.direction == "-") {
          if (params.scale < lastClusterZoomLevel * clusterFactor) {
            makeClusters(params.scale);
            lastClusterZoomLevel = params.scale;
          }
        } else {
          openClusters(params.scale);
        }
      });

      // if we click on a node, we want to open it up!
      network.on("selectNode", function (params) {
        if (params.nodes.length == 1) {
          if (network.isCluster(params.nodes[0]) == true) {
            network.openCluster(params.nodes[0]);
          }
        }
      });

      // make the clusters
      function makeClusters(scale) {
        var clusterOptionsByData = {
          processProperties: function (clusterOptions, childNodes) {
            clusterIndex = clusterIndex + 1;
            var childrenCount = 0;
            for (var i = 0; i < childNodes.length; i++) {
              childrenCount += childNodes[i].childrenCount || 1;
            }
            clusterOptions.childrenCount = childrenCount;
            clusterOptions.label = "# " + childrenCount + "";
            clusterOptions.font = { size: childrenCount * 5 + 30 };
            clusterOptions.id = "cluster:" + clusterIndex;
            clusters.push({ id: "cluster:" + clusterIndex, scale: scale });
            return clusterOptions;
          },
          clusterNodeProperties: {
            borderWidth: 3,
            shape: "database",
            font: { size: 30 },
          },
        };
        network.clusterOutliers(clusterOptionsByData);
        if (document.getElementById("stabilizeCheckbox").checked === true) {
          // since we use the scale as a unique identifier, we do NOT want to fit after the stabilization
          network.setOptions({ physics: { stabilization: { fit: false } } });
          network.stabilize();
        }
      }

      // open them back up!
      function openClusters(scale) {
        var newClusters = [];
        var declustered = false;
        for (var i = 0; i < clusters.length; i++) {
          if (clusters[i].scale < scale) {
            network.openCluster(clusters[i].id);
            lastClusterZoomLevel = scale;
            declustered = true;
          } else {
            newClusters.push(clusters[i]);
          }
        }
        clusters = newClusters;
        if (
          declustered === true &&
          document.getElementById("stabilizeCheckbox").checked === true
        ) {
          // since we use the scale as a unique identifier, we do NOT want to fit after the stabilization
          network.setOptions({ physics: { stabilization: { fit: false } } });
          network.stabilize();
        }
      }
</script>
