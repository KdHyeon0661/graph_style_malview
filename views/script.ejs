<script type="text/javascript">
        var edges;
        var nodes;
        var network;
        var container;
        var options, data;

        // This method is responsible for drawing the graph, returns the drawn network
        function drawGraph() {
            var container = document.getElementById('mynetwork');


            // parsing and collecting nodes and edges from the python
            nodes = new vis.DataSet([
            {"group": 0, "id": 6, "label": 6, "shape": "dot", "size": 10, "title": "6"},
            {"group": 0, "id": 17, "label": 17, "shape": "dot", "size": 10, "title": "17"},
            {"group": 0, "id": 20, "label": 20, "shape": "dot", "size": 10, "title": "20"},
            {"group": 0, "id": 32, "label": 32, "shape": "dot", "size": 10, "title": "32"},
            {"group": 0, "id": 44, "label": 44, "shape": "dot", "size": 10, "title": "44"},
            {"group": 0, "id": 50, "label": 50, "shape": "dot", "size": 10, "title": "50"},
            {"group": 0, "id": 58, "label": 58, "shape": "dot", "size": 10, "title": "58"},
            {"group": 0, "id": 59, "label": 59, "shape": "dot", "size": 10, "title": "59"},
            {"group": 0, "id": 61, "label": 61, "shape": "dot", "size": 10, "title": "61"},
            {"group": 1, "id": 15, "label": 15, "shape": "dot", "size": 10, "title": "15"},
            {"group": 2, "id": 3, "label": 3, "shape": "dot", "size": 10, "title": "3"},
            {"group": 3, "id": 4, "label": 4, "shape": "dot", "size": 10, "title": "4"},
            {"group": 4, "id": 36, "label": 36, "shape": "dot", "size": 10, "title": "36"},
            {"group": 4, "id": 57, "label": 57, "shape": "dot", "size": 10, "title": "57"},
            {"group": 5, "id": 12, "label": 12, "shape": "dot", "size": 10, "title": "12"},
            {"group": 5, "id": 23, "label": 23, "shape": "dot", "size": 10, "title": "23"},
            {"group": 5, "id": 31, "label": 31, "shape": "dot", "size": 10, "title": "31"},
            {"group": 5, "id": 42, "label": 42, "shape": "dot", "size": 10, "title": "42"},
            {"group": 5, "id": 46, "label": 46, "shape": "dot", "size": 10, "title": "46"},
            {"group": 5, "id": 48, "label": 48, "shape": "dot", "size": 10, "title": "48"},
            {"group": 5, "id": 54, "label": 54, "shape": "dot", "size": 10, "title": "54"},
            {"group": 5, "id": 64, "label": 64, "shape": "dot", "size": 10, "title": "64"},
            {"group": 5, "id": 71, "label": 71, "shape": "dot", "size": 10, "title": "71"},
            {"group": 5, "id": 76, "label": 76, "shape": "dot", "size": 10, "title": "76"},
            {"group": 6, "id": 0, "label": 0, "shape": "dot", "size": 10, "title": "0"},
            {"group": 6, "id": 2, "label": 2, "shape": "dot", "size": 10, "title": "2"},
            {"group": 6, "id": 10, "label": 10, "shape": "dot", "size": 10, "title": "10"},
            {"group": 6, "id": 19, "label": 19, "shape": "dot", "size": 10, "title": "19"},
            {"group": 6, "id": 21, "label": 21, "shape": "dot", "size": 10, "title": "21"},
            {"group": 6, "id": 38, "label": 38, "shape": "dot", "size": 10, "title": "38"},
            {"group": 6, "id": 49, "label": 49, "shape": "dot", "size": 10, "title": "49"},
            {"group": 6, "id": 67, "label": 67, "shape": "dot", "size": 10, "title": "67"},
            {"group": 6, "id": 70, "label": 70, "shape": "dot", "size": 10, "title": "70"},
            {"group": 7, "id": 5, "label": 5, "shape": "dot", "size": 10, "title": "5"},
            {"group": 7, "id": 43, "label": 43, "shape": "dot", "size": 10, "title": "43"},
            {"group": 8, "id": 22, "label": 22, "shape": "dot", "size": 10, "title": "22"},
            {"group": 8, "id": 28, "label": 28, "shape": "dot", "size": 10, "title": "28"},
            {"group": 8, "id": 30, "label": 30, "shape": "dot", "size": 10, "title": "30"},
            {"group": 8, "id": 33, "label": 33, "shape": "dot", "size": 10, "title": "33"},
            {"group": 8, "id": 34, "label": 34, "shape": "dot", "size": 10, "title": "34"},
            {"group": 8, "id": 39, "label": 39, "shape": "dot", "size": 10, "title": "39"},
            {"group": 8, "id": 45, "label": 45, "shape": "dot", "size": 10, "title": "45"},
            {"group": 8, "id": 52, "label": 52, "shape": "dot", "size": 10, "title": "52"},
            {"group": 8, "id": 53, "label": 53, "shape": "dot", "size": 10, "title": "53"},
            {"group": 8, "id": 63, "label": 63, "shape": "dot", "size": 10, "title": "63"},
            {"group": 8, "id": 66, "label": 66, "shape": "dot", "size": 10, "title": "66"},
            {"group": 8, "id": 69, "label": 69, "shape": "dot", "size": 10, "title": "69"},
            {"group": 8, "id": 72, "label": 72, "shape": "dot", "size": 10, "title": "72"},
            {"group": 9, "id": 37, "label": 37, "shape": "dot", "size": 10, "title": "37"},
            {"group": 9, "id": 56, "label": 56, "shape": "dot", "size": 10, "title": "56"},
            {"group": 10, "id": 1, "label": 1, "shape": "dot", "size": 10, "title": "1"},
            {"group": 10, "id": 7, "label": 7, "shape": "dot", "size": 10, "title": "7"},
            {"group": 10, "id": 8, "label": 8, "shape": "dot", "size": 10, "title": "8"},
            {"group": 10, "id": 9, "label": 9, "shape": "dot", "size": 10, "title": "9"},
            {"group": 10, "id": 11, "label": 11, "shape": "dot", "size": 10, "title": "11"},
            {"group": 10, "id": 14, "label": 14, "shape": "dot", "size": 10, "title": "14"},
            {"group": 10, "id": 16, "label": 16, "shape": "dot", "size": 10, "title": "16"},
            {"group": 10, "id": 18, "label": 18, "shape": "dot", "size": 10, "title": "18"},
            {"group": 10, "id": 26, "label": 26, "shape": "dot", "size": 10, "title": "26"},
            {"group": 10, "id": 27, "label": 27, "shape": "dot", "size": 10, "title": "27"},
            {"group": 10, "id": 47, "label": 47, "shape": "dot", "size": 10, "title": "47"},
            {"group": 10, "id": 55, "label": 55, "shape": "dot", "size": 10, "title": "55"},
            {"group": 10, "id": 73, "label": 73, "shape": "dot", "size": 10, "title": "73"},
            {"group": 11, "id": 74, "label": 74, "shape": "dot", "size": 10, "title": "74"},
            {"group": 12, "id": 24, "label": 24, "shape": "dot", "size": 10, "title": "24"},
            {"group": 12, "id": 25, "label": 25, "shape": "dot", "size": 10, "title": "25"},
            {"group": 12, "id": 29, "label": 29, "shape": "dot", "size": 10, "title": "29"},
            {"group": 12, "id": 40, "label": 40, "shape": "dot", "size": 10, "title": "40"},
            {"group": 12, "id": 41, "label": 41, "shape": "dot", "size": 10, "title": "41"},
            {"group": 12, "id": 68, "label": 68, "shape": "dot", "size": 10, "title": "68"},
            {"group": 12, "id": 75, "label": 75, "shape": "dot", "size": 10, "title": "75"},
            {"group": 13, "id": 51, "label": 51, "shape": "dot", "size": 10, "title": "51"},
            {"group": 13, "id": 60, "label": 60, "shape": "dot", "size": 10, "title": "60"},
            {"group": 13, "id": 65, "label": 65, "shape": "dot", "size": 10, "title": "65"},
            {"group": 14, "id": 35, "label": 35, "shape": "dot", "size": 10, "title": "35"},
            {"group": 15, "id": 62, "label": 62, "shape": "dot", "size": 10, "title": "62"},
            {"group": 16, "id": 13, "label": 13, "shape": "dot", "size": 10, "title": "13"},
        ]);
            edges = new vis.DataSet([

                            {"from": 6, "to": 17, "label": "0.193"},
            {"from": 6, "to": 20, "label": "0.034"},
            {"from": 6, "to": 32, "label": "0.193"},
            {"from": 6, "to": 44, "label": "0.136"},
            {"from": 6, "to": 50, "label": "0.182"},
            {"from": 6, "to": 58, "label": "0.148"},
            {"from": 6, "to": 59, "label": "0.225"},
            {"from": 6, "to": 61, "label": "0.045"},
            {"from": 36, "to": 57, "label": "0.26"},
            {"from": 12, "to": 23, "label": "0.054"},
            {"from": 12, "to": 31, "label": "0.354"},
            {"from": 12, "to": 42, "label": "0.135"},
            {"from": 12, "to": 46, "label": "0.342"},
            {"from": 12, "to": 48, "label": "0.342"},
            {"from": 12, "to": 54, "label": "0.342"},
            {"from": 12, "to": 64, "label": "0.342"},
            {"from": 12, "to": 71, "label": "0.054"},
            {"from": 12, "to": 76, "label": "0.081"},
            {"from": 0, "to": 2, "label": "0.341"},
            {"from": 0, "to": 10, "label": "0.345"},
            {"from": 0, "to": 19, "label": "0.357"},
            {"from": 0, "to": 21, "label": "0.36"},
            {"from": 0, "to": 38, "label": "0.362"},
            {"from": 0, "to": 49, "label": "0.389"},
            {"from": 0, "to": 67, "label": "0.382"},
            {"from": 0, "to": 70, "label": "0.362"},
            {"from": 5, "to": 43, "label": "0.468"},
            {"from": 22, "to": 28, "label": "0.227"},
            {"from": 22, "to": 30, "label": "0.255"},
            {"from": 22, "to": 33, "label": "0.212"},
            {"from": 22, "to": 34, "label": "0.262"},
            {"from": 22, "to": 39, "label": "0.394"},
            {"from": 22, "to": 45, "label": "0.328"},
            {"from": 22, "to": 52, "label": "0.263"},
            {"from": 22, "to": 53, "label": "0.362"},
            {"from": 22, "to": 63, "label": "0.387"},
            {"from": 22, "to": 66, "label": "0.433"},
            {"from": 22, "to": 69, "label": "0.277"},
            {"from": 22, "to": 72, "label": "0.241"},
            {"from": 37, "to": 56, "label": "0.39"},
            {"from": 1, "to": 7, "label": "0.304"},
            {"from": 1, "to": 8, "label": "0.328"},
            {"from": 1, "to": 9, "label": "0.343"},
            {"from": 1, "to": 11, "label": "0.333"},
            {"from": 1, "to": 14, "label": "0.314"},
            {"from": 1, "to": 16, "label": "0.321"},
            {"from": 1, "to": 18, "label": "0.358"},
            {"from": 1, "to": 26, "label": "0.328"},
            {"from": 1, "to": 27, "label": "0.292"},
            {"from": 1, "to": 47, "label": "0.423"},
            {"from": 1, "to": 55, "label": "0.355"},
            {"from": 1, "to": 73, "label": "0.38"},
            {"from": 24, "to": 25, "label": "0.239"},
            {"from": 24, "to": 29, "label": "0.044"},
            {"from": 24, "to": 40, "label": "0.34"},
            {"from": 24, "to": 41, "label": "0.239"},
            {"from": 24, "to": 68, "label": "0.067"},
            {"from": 24, "to": 75, "label": "0.044"},
            {"from": 51, "to": 60, "label": "0.395"},
            {"from": 51, "to": 65, "label": "0.027"},
            {"from": 6, "to": 15, "label": "0.477"},
            {"from": 5, "to": 22, "label": "0.493"},
            {"from": 22, "to": 37, "label": "0.433"},
            {"from": 22, "to": 1, "label": "0.384"},
            {"from": 37, "to": 1, "label": "0.387"},
]);
            data = {nodes: nodes, edges: edges};

                var options = {
                    "layout": {"randomSeed": 1}, 
                    "configure": {"enabled": false}, 
                    "edges": {
                        "color": {"inherit": true},
                        "smooth": {"enabled": true, "type": "dynamic"}
                    },
                    "interaction": {"dragNodes": true, 
                        "hideEdgesOnDrag": false, 
                        "hideNodesOnDrag": false, 
                        "navigationButtons": true}, 
                    "physics": {"enabled": true, 
                        "stabilization": {"enabled": true, 
                        "fit": true, 
                        "iterations": 1000, 
                        "onlyDynamicEdges": false, 
                        "updateInterval": 50}
                      }
                };
                
                network = new vis.Network(container, data, options);

                return network;
            }

            var network = drawGraph();
      let value = document.getElementById("close");
      let val = value.innerText.split('\n');
      let size = Number(val[0]);
      let api_val = [];
      let c2clen = [];
      for(let i = 1 + size;i <1 + size * 2;i++){
        api_val.push(val[i].split(','));
      }

      for(let i = 1 + size * 2;i <1 + size * 3;i++){
        c2clen.push(val[i].split(','));
      }


    
    network.on("click", function (params) {
        let clickedNodes = nodes.get(params.nodes);
        document.getElementById("clusterId").innerText = (clickedNodes[0].group).toString();
        document.getElementById("nodeId").innerText = (clickedNodes[0].id).toString();

        const parentElement = document.getElementById('cluster-api-list');
        while (parentElement.firstChild) {
          parentElement.removeChild(parentElement.firstChild);
        }

        for(let i = 0;i < api_val[clickedNodes[0].group].length;i++){
          let newParagraph = document.createElement('p');
          newParagraph.classList.add('first-value');
          newParagraph.textContent = api_val[clickedNodes[0].group][i];
          parentElement.appendChild(newParagraph);
        }

        const parentElement2 = document.getElementById('c2c-length-list');
        while (parentElement2.firstChild) {
          parentElement2.removeChild(parentElement2.firstChild);
        }
        for(let i = 0;i < c2clen[clickedNodes[0].group].length;i++){
          let newParagraph = document.createElement('p');
          newParagraph.classList.add('second-value');
          newParagraph.textContent = "클러스터 " + i.toString() + "과의 API 일치도 : " + c2clen[clickedNodes[0].group][i].toString();
          parentElement2.appendChild(newParagraph);
        }
        
      });
      
      
    var clusterIndex = 0;
      var clusters = [];
      var lastClusterZoomLevel = 0;
      var clusterFactor = 0.9;
      
    network.once("initRedraw", function () {
        if (lastClusterZoomLevel === 0) {
          lastClusterZoomLevel = network.getScale();
        }
      });

      // we use the zoom event for our clustering
      network.on("zoom", function (params) {
        if (params.direction == "-") {
          if (params.scale < lastClusterZoomLevel * clusterFactor) {
            makeClusters(params.scale);
            lastClusterZoomLevel = params.scale;
          }
        } else {
          openClusters(params.scale);
        }
      });

      // if we click on a node, we want to open it up!
      network.on("selectNode", function (params) {
        if (params.nodes.length == 1) {
          if (network.isCluster(params.nodes[0]) == true) {
            network.openCluster(params.nodes[0]);
          }
        }
      });

      // make the clusters
      function makeClusters(scale) {
        var clusterOptionsByData = {
          processProperties: function (clusterOptions, childNodes) {
            clusterIndex = clusterIndex + 1;
            var childrenCount = 0;
            for (var i = 0; i < childNodes.length; i++) {
              childrenCount += childNodes[i].childrenCount || 1;
            }
            clusterOptions.childrenCount = childrenCount;
            clusterOptions.label = "# " + childrenCount + "";
            clusterOptions.font = { size: childrenCount * 5 + 30 };
            clusterOptions.id = "cluster:" + clusterIndex;
            clusters.push({ id: "cluster:" + clusterIndex, scale: scale });
            return clusterOptions;
          },
          clusterNodeProperties: {
            borderWidth: 3,
            shape: "database",
            font: { size: 30 },
          },
        };
        network.clusterOutliers(clusterOptionsByData);
        if (document.getElementById("stabilizeCheckbox").checked === true) {
          // since we use the scale as a unique identifier, we do NOT want to fit after the stabilization
          network.setOptions({ physics: { stabilization: { fit: false } } });
          network.stabilize();
        }
      }

      // open them back up!
      function openClusters(scale) {
        var newClusters = [];
        var declustered = false;
        for (var i = 0; i < clusters.length; i++) {
          if (clusters[i].scale < scale) {
            network.openCluster(clusters[i].id);
            lastClusterZoomLevel = scale;
            declustered = true;
          } else {
            newClusters.push(clusters[i]);
          }
        }
        clusters = newClusters;
        if (
          declustered === true &&
          document.getElementById("stabilizeCheckbox").checked === true
        ) {
          // since we use the scale as a unique identifier, we do NOT want to fit after the stabilization
          network.setOptions({ physics: { stabilization: { fit: false } } });
          network.stabilize();
        }
      }
</script>
